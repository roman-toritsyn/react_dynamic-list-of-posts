{"version":3,"sources":["api/api.ts","components/PostsList/PostsList.tsx","api/posts.tsx","components/NewCommentForm/NewCommentForm.tsx","api/comments.tsx","components/PostDetails/PostDetails.tsx","App.tsx","api/users.tsx","index.tsx"],"names":["BASE_URL","request","url","fetch","then","responce","ok","Error","status","statusText","json","PostsList","selectedUserId","setSelectedPostId","selectedPostId","useState","posts","setPosts","useEffect","res","filter","el","userId","className","map","post","title","type","onClick","id","NewCommentForm","trigger","setTrigger","name","setName","email","setEmail","comment","setComment","error","setError","onSubmit","event","preventDefault","postId","method","body","JSON","stringify","headers","addComment","value","onChange","target","placeholder","PostDetails","setPost","comments","setComments","commentsVisible","setCommentsVisible","response","length","commentId","prev","App","setSelectedUserId","users","setUsers","usersListItems","user","htmlFor","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7cb46cbe.chunk.js","sourcesContent":["export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = (url: string | number) => {\n  return fetch(`${BASE_URL}${url}`)\n    .then(responce => {\n      if (!responce.ok) {\n        throw new Error(`${responce.status} -- ${responce.statusText}`);\n      }\n\n      return responce.json();\n    });\n};\n","import React, { useEffect, useState } from 'react';\nimport { getPosts } from '../../api/posts';\nimport './PostsList.scss';\n\ntype Post = {\n  id: number;\n  userId: number;\n  title: string;\n  selectedPostId: number;\n};\n\ntype Props = {\n  selectedUserId: string;\n  setSelectedPostId: React.Dispatch<React.SetStateAction<number>>;\n  selectedPostId: number;\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedUserId,\n  setSelectedPostId,\n  selectedPostId,\n}) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  useEffect(() => {\n    getPosts()\n      .then((responce) => {\n        let res = responce;\n\n        if (selectedUserId !== '') {\n          res = res.filter((el: Post) => el.userId === +selectedUserId);\n        }\n\n        setPosts(res);\n      });\n  }, [selectedUserId]);\n\n  return (\n    <div className=\"PostsList\">\n      <h2>Posts:</h2>\n\n      <ul className=\"PostsList__list\">\n        {posts.map((post) => (\n          <li className=\"PostsList__item\">\n            <div>\n              <b>\n                {`[User #${post.userId}]: `}\n              </b>\n              {post.title}\n            </div>\n            <button\n              type=\"button\"\n              className=\"PostsList__button button\"\n              onClick={() => {\n                setSelectedPostId((selectedPostId !== post.id) ? post.id : 0);\n              }}\n            >\n              {selectedPostId !== post.id ? 'Open' : 'Close'}\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import { request } from './api';\n\nexport const getPosts = () => request('/posts');\n\nexport const getPostDetails = (postId: number) => request(`/posts/${postId}`);\n","import React, { useState } from 'react';\nimport { addComment } from '../../api/comments';\nimport './NewCommentForm.scss';\n\n// type Comment = {\n//   id: number;\n//   body: string;\n// };\n\ntype Props = {\n  selectedPostId: number;\n  trigger: boolean;\n  setTrigger:(value: boolean) => void;\n};\n\nexport const NewCommentForm: React.FC<Props> = ({\n  selectedPostId,\n  trigger,\n  setTrigger,\n}) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [comment, setComment] = useState('');\n  const [error, setError] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    if (name && email && comment) {\n      addComment(selectedPostId, name, email, comment)\n        .then(() => {\n          setTrigger(!trigger);\n        });\n      setName('');\n      setEmail('');\n      setComment('');\n      setError(false);\n    } else {\n      setError(true);\n    }\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          value={name}\n          onChange={(event) => {\n            setName(event.target.value);\n            setError(false);\n          }}\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          value={email}\n          onChange={(event) => {\n            setEmail(event.target.value);\n            setError(false);\n          }}\n          type=\"email\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          value={comment}\n          onChange={(event) => {\n            setComment(event.target.value);\n            setError(false);\n          }}\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n      {error && (\n        <div className=\"NewCommentForm__error\">\n          Please enter all required information\n        </div>\n      )}\n\n    </form>\n  );\n};\n","import { BASE_URL, request } from './api';\n\nexport const getComments = (postId: number) => request(`/comments?postId=${postId}`);\n\nexport const deleteComment = (commentId: number) => {\n  return fetch(`${BASE_URL}/comments/${commentId}`, { method: 'DELETE' })\n    .then(responce => {\n      if (!responce.ok) {\n        throw new Error(`${responce.status} -- ${responce.statusText}`);\n      }\n\n      return responce.json();\n    });\n};\n\nexport const addComment = (\n  postId: number,\n  name: string,\n  email: string,\n  comment: string,\n) => {\n  return fetch(`${BASE_URL}/comments`, {\n    method: 'POST',\n    body: JSON.stringify({\n      postId,\n      name,\n      email,\n      body: comment,\n    }),\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n  })\n    .then(responce => responce.json());\n};\n","import React, { useEffect, useState } from 'react';\nimport { deleteComment, getComments } from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\n\ntype Props = {\n  selectedPostId: number;\n};\n\ntype Post = {\n  id: number;\n  userId: number;\n  title: string;\n  body: string;\n} | null;\n\ntype Comment = {\n  id: number;\n  body: string;\n};\n\nexport const PostDetails: React.FC<Props> = ({ selectedPostId }) => {\n  const [post, setPost] = useState<Post>(null);\n  const [comments, setComments] = useState<Comment[]>([]);\n  const [commentsVisible, setCommentsVisible] = useState(true);\n  const [trigger, setTrigger] = useState(true);\n\n  useEffect(() => {\n    getPostDetails(selectedPostId)\n      .then(response => {\n        setPost(response);\n      });\n  }, [selectedPostId]);\n\n  useEffect(() => {\n    getComments(selectedPostId)\n      .then(responce => {\n        setComments(responce);\n      });\n  }, [selectedPostId, trigger]);\n\n  useEffect(() => {\n    setCommentsVisible(true);\n  }, [selectedPostId]);\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>\n          {post?.body}\n        </p>\n      </section>\n\n      <section className=\"PostDetails__comments\">\n        {comments.length !== 0 && (\n          <>\n            <button\n              type=\"button\"\n              className=\"button\"\n              onClick={() => {\n                setCommentsVisible(!commentsVisible);\n              }}\n            >\n              {(commentsVisible) ? 'Hide ' : 'Show '}\n              {comments.length}\n              {' comment'}\n              {((comments.length > 1) ? 's' : '')}\n            </button>\n          </>\n        )}\n\n        {commentsVisible && (\n          <ul className=\"PostDetails__list\">\n            {comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => {\n                    deleteComment(comment.id);\n                    setComments(prev => (prev.filter(el => el.id !== comment.id)));\n                  }}\n                >\n                  X\n                </button>\n                <p>\n                  {comment.body}\n                </p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            selectedPostId={selectedPostId}\n            trigger={trigger}\n            setTrigger={setTrigger}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUsers } from './api/users';\n\ntype User = {\n  id: number;\n  name: string;\n};\n\nconst App: React.FC = () => {\n  const [selectedUserId, setSelectedUserId] = useState('');\n  const [users, setUsers] = useState<User[]>([]);\n  const [selectedPostId, setSelectedPostId] = useState(0);\n\n  useEffect(() => {\n    getUsers()\n      .then(responce => setUsers(responce));\n  }, []);\n\n  const usersListItems = users.map(user => (\n    <>\n      <option value={user.id}>\n        {user.name}\n      </option>\n    </>\n  ));\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label\n          htmlFor=\"App__user-selector\"\n        >\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            value={selectedUserId}\n            onChange={(event) => setSelectedUserId(event.target.value)}\n          >\n            <option value=\"\">\n              All users\n            </option>\n            {usersListItems}\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            selectedUserId={selectedUserId}\n            setSelectedPostId={setSelectedPostId}\n            selectedPostId={selectedPostId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {selectedPostId !== 0\n          && <PostDetails selectedPostId={selectedPostId} />}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import { request } from './api';\n\nexport const getUsers = () => request('/users');\n","import ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}